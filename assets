import requests
import json
import logging
import os
from airflow.models import Variable
from datetime import datetime, timezone
from requests.auth import HTTPBasicAuth
from google.cloud import bigquery

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("airflow.task")

collibra_hostnames = {"dev": "arvest-dev.collibra.com", "test": "arvest-dev.collibra.com", "prod": "arvest.collibra.com"}
ENVIRONMENT = os.environ.get("DBT_ENVIRONMENT")
COLLIBRA_URL_HOSTNAME = collibra_hostnames[ENVIRONMENT]
COLLIBRA_USERNAME = "svc_dataplatform_collibra_metadata"
COLLIBRA_PASSWORD = Variable.get("collibra_password")
PROJECT = os.environ.get("PROJECTID")

def collibra_pii_sync():
    logger.info(f"Collibra host name: {COLLIBRA_URL_HOSTNAME}")
    logger.info(f"Collibra pswd: {COLLIBRA_PASSWORD}")
    project_id = PROJECT
    bq_table_name = f"{project_id}.landing_collibra.asset_classified"
    metadata_table = f"{project_id}.landing_collibra.metadata"

    bq_client = bigquery.Client(project=project_id)

    metadata_query = "SELECT last_processed_timestamp FROM `{}` WHERE id='last_updated'".format(metadata_table)
    metadata_results = list(bq_client.query(metadata_query).result())

    if metadata_results:
        last_timestamp = metadata_results[0].last_processed_timestamp
    else:
        last_timestamp = datetime.strptime("2023-01-01 00:00:00", "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)

    bq_query = "SELECT * FROM `{}` WHERE last_modified_timestamp >= TIMESTAMP('{}') LIMIT 2".format(bq_table_name, last_timestamp)
    bq_results = bq_client.query(bq_query).result()

    collibra_payload = []
    new_last_timestamp = last_timestamp
    for row in bq_results:
        parsed_payload = json.loads(row.json_payload)
        logger.info(f"Json Data: {row.json_payload}")
        value = "true" if "is_pii" in parsed_payload and parsed_payload["is_pii"] else "false"
        asset_data = {
            "assetId": row.asset_id,
            "value": value
        }
        logger.info(f"Asset Data: {asset_data}")
        collibra_payload.append(asset_data)
        
        if row.last_modified_timestamp > new_last_timestamp:
            new_last_timestamp = row.last_modified_timestamp

    # Retrieve PII attributes using Collibra Get Attributes API
    pii_attribute_ids = []
    https://arvest.collibra.com/rest/2.0/attributes?offset=0&limit=0&countLimit=-1&typeIds=00000000-0000-0000-0001-000500000029&assetId=5ef81b60-d273-4cd0-93a4-248fc054bf05&sortOrder=DESC&sortField=ID
    for asset_data in collibra_payload:
        asset_id = asset_data["assetId"]
        response = requests.get(
            f"""https://{COLLIBRA_URL_HOSTNAME}/rest/2.0/attributes?offset=0&limit=0&typeIds=00000000-0000-0000-0001-000500000029
            &assetId={asset_data["assetId"]}&sortOrder=DESC&sortField=id""",
            auth=HTTPBasicAuth(COLLIBRA_USERNAME, "St@rt0fF@ll2023"),
            headers={"Accept": "application/json"}
        )
        if response.status_code == 200:
            attributes = response.json()
            for attribute in attributes:
                pii_attribute_ids.append(attribute["id"])
        else:
            logger.error(f"Error fetching attributes for asset {asset_id}: {response.status_code}")
            logger.error(f"Response Content: {response.content}")

    # Patch PII attributes using Collibra Patch Attributes API
    patch_payload = [{"id": attr_id, "value": {}} for attr_id in pii_attribute_ids]
    response = requests.patch(
        f"https://{COLLIBRA_URL_HOSTNAME}/rest/2.0/attributes/bulk",
        auth=HTTPBasicAuth(COLLIBRA_USERNAME, "St@rt0fF@ll2023"),
        headers={"Accept": "application/json", "Content-Type": "application/json"},
        json=patch_payload
    )

    if response.status_code == 200:
        if metadata_results:
            update_query = """
            UPDATE `{}` SET last_processed_timestamp = TIMESTAMP('{}') WHERE id='last_updated'
            """.format(metadata_table, new_last_timestamp)
        else:
            update_query = """
            INSERT INTO `{}` (id, last_processed_timestamp) VALUES('last_updated', TIMESTAMP('{}'))
            """.format(metadata_table, new_last_timestamp)
        
        bq_client.query(update_query).result()
        logger.info("Attributes sent to Collibra successfully!")
    else:
        logger.error(f"Error patching attributes: {response.status_code}")
        logger.error(f"Response Content: {response.content}")
