Understood. Here is a **clean, professional version** of **Step 1 and Step 2**, along with a brief introduction and permission requirements — formatted for internal documentation or a wiki page. It avoids emojis and informal markers like green checks.

---

# Recovering a Dropped Unity Catalog External Table (UNDROP)

This document outlines the procedure to recover a Unity Catalog **external table** that was accidentally dropped using the `DROP TABLE` command. The recovery is possible if the underlying data remains intact in S3 and the table’s metadata has not been garbage collected.

Unity Catalog supports the `UNDROP TABLE` command, which restores the dropped table including its schema, metadata, and location. This should be the first method attempted before falling back on manual recovery.

---

## Step 1: Attempt `UNDROP TABLE`

If the table was recently dropped, attempt to recover it using the following SQL command:

```sql
UNDROP TABLE <catalog>.<schema>.<table_name>;
```

This command restores the table as long as the system still retains its metadata. No data movement is required, and the original schema and S3 location are preserved.

If this succeeds, the table is immediately accessible again.

---

## Step 2: Validate the Restored Table

After executing the `UNDROP TABLE` command, validate that the table has been restored correctly:

```sql
-- Confirm that the table is listed again
SHOW TABLES IN <catalog>.<schema>;

-- Verify schema and metadata
DESCRIBE TABLE <catalog>.<schema>.<table_name>;

-- Check sample data
SELECT * FROM <catalog>.<schema>.<table_name> LIMIT 10;
```

At this stage, you should also confirm that permissions on the table are still intact. If necessary, reapply any required grants using `GRANT` statements.

---

## Required Permissions for `UNDROP TABLE`

To use `UNDROP TABLE`, a user must meet **one** of the following criteria:

- The user is the **owner of the dropped table** and has:
  - `USE CATALOG` on the catalog
  - `USE SCHEMA` and `CREATE TABLE` on the schema

- The user is the **owner of the schema** and has:
  - `USE CATALOG` on the catalog

- The user is the **owner of the catalog**

- The user is the **owner of the metastore**

- The user has:
  - `MANAGE` privilege on the dropped table
  - `USE SCHEMA` and `CREATE TABLE` on the schema
  - `USE CATALOG` on the catalog

If none of these conditions are met, a Unity Catalog admin or metastore admin must perform the recovery.

---

Let me know if you’d like this in Markdown or Confluence-compatible format.
