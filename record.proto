def validate_and_split_records(df):
    """
    Validate records and split into valid and error dataframes
    EXACTLY matching the SAR Fallout and Exclusion SQL logic
    """
    # Add validation status column - EXACTLY as in the SAR Fallout SQL
    df.createOrReplaceTempView("TD_SAR_VW")
    fallout_exclusion_sql = """
        select 
        Case 
        when PhysicalState <> CountyState Then 'Valid, Physical Address State '||PhysicalState||', SCC State '||CountyState
        when MailAddr1 is NULL Then 'Fallout, no mailing address'
        when "Member ID" is NULL Then 'Fallout, no member ID'
        when FirstName is NULL Then 'Fallout, no first name'
        when LastName is NUC8R6KNLL Then 'Fallout, no last name'
        when MailCity is NULL Then 'Fallout, no mail address city'
        when MailState is NULL Then 'Fallout, no mail address state'
        when MailZip is NULL Then 'Fallout, no mail address zip'
        When "Plan Name" is NULL Then 'Fallout, no plan name'
        When PhyState is NULL Then 'Fallout, no physical address state'
        when "Material ID" is NULL Then 'BOM, Missing Data'
        --when CurrentStatus = 'Not Enrolled' and RIGHT("Member ID",2)='XX' Then 'Do not report, not enrolled'
        when CurrentStatus = 'Not Enrolled' Then 'Do not report, not enrolled'
        when CurrentStatus = 'Pending' and cast(substr(LatestEffectiveDate,1,10) as date format 'YYYY-MM-DD') < current_date and Span_EffDate IS NULL 
            Then 'Do not report, member effective date is in the past, has no span and is considered canceled'
        when CurrentStatus = 'Pending' and cast(substr(LatestEffectiveDate,1,10) as date format 'YYYY-MM-DD') >= current_date and Span_EffDate IS NULL 
            Then 'Fallout, member status pending with effective date in future with no span'
        when CurrentStatus = 'Pending' Then 'Valid, status pending and effectivedate in future with span'
        when SCCCode is null then 'Fallout, no SCC'
        Else 'Valid' end as Comments,
        t.* from TD_SAR_VW t"""
    
    fallout_exclusion_df = spark.sql(fallout_exclusion_sql)
    # Split into valid and error records
    valid_df = fallout_exclusion_df.filter(
        (col("ValidationStatus") == "Valid") | 
        (col("ValidationStatus").startswith("Valid,"))
    ).drop("ValidationStatus")
    
    error_df = fallout_exclusion_df.filter(
        (col("ValidationStatus").startswith("Fallout")) | 
        (col("ValidationStatus").startswith("BOM"))
    )
    return valid_df, error_df
