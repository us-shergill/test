import smbclient
import os
from ingest.config import Config

# Set up global credentials for smbclient
smbclient.ClientConfig(username=Config.NAS_USERNAME, password=Config.NAS_PASSWORD)

def connect_to_nas():
    """
    Since smbclient handles sessions internally, we don't need to explicitly create
    connection and session objects as with smbprotocol. This method now just registers the session.
    """
    smbclient.register_session(Config.NAS_HOST, username=Config.NAS_USERNAME, password=Config.NAS_PASSWORD)
    print(f"Connected to NAS share: \\\\{Config.NAS_HOST}\\{Config.NAS_SHARE}")

def transfer_file_to_nas(local_file, remote_file):
    """
    Reuse the original logic of transferring the file in chunks, now using smbclient.
    """
    with open(local_file, 'rb') as f:
        # Open the remote file in write mode using smbclient
        with smbclient.open_file(remote_file, mode='wb', username=Config.NAS_USERNAME, password=Config.NAS_PASSWORD) as remote_fd:
            chunk_size = 1024 * 64  # 64 KB chunks
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                remote_fd.write(chunk)
    print(f"File {os.path.basename(local_file)} transferred to {remote_file} on NAS.")

def transfer_files(file_name):
    """
    Use the updated connect_to_nas and transfer_file_to_nas methods.
    """
    # Register session
    connect_to_nas()

    # Define the local and remote file paths
    local_file = os.path.join(Config.SOURCE_FILE_PATH, file_name)
    remote_file = fr"\\{Config.NAS_HOST}\{Config.NAS_SHARE}\{Config.NAS_TARGET_DIRECTORY}\{file_name}"

    try:
        transfer_file_to_nas(local_file, remote_file)
        return True
    except Exception as e:
        raise Exception(f"Error transferring file to NAS: {str(e)}")
