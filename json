import smbclient
import os

class NASClient:
    def __init__(self, username, password, host, share, target_directory, source_file_path):
        """
        Initialize the NASClient class and set up instance variables with NAS credentials and paths.
        """
        self.username = username
        self.password = password
        self.host = host
        self.share = share
        self.target_directory = target_directory
        self.source_file_path = source_file_path

        # Set up global credentials for smbclient
        smbclient.ClientConfig(username=self.username, password=self.password)

    def connect_to_nas(self):
        """
        Register a session with the NAS server.
        """
        smbclient.register_session(self.host, username=self.username, password=self.password)
        print(f"Connected to NAS share: \\\\{self.host}\\{self.share}")

    def transfer_file_to_nas(self, local_file, remote_file):
        """
        Transfer a file to the NAS in 64 KB chunks.
        """
        with open(local_file, 'rb') as f:
            with smbclient.open_file(
                remote_file, mode='wb', username=self.username, password=self.password
            ) as remote_fd:
                chunk_size = 1024 * 64  # 64 KB
                while chunk := f.read(chunk_size):
                    remote_fd.write(chunk)
        print(f"File {os.path.basename(local_file)} transferred to {remote_file} on NAS.")

    def transfer_files(self, file_name):
        """
        Connect to the NAS and transfer the specified file.
        """
        self.connect_to_nas()
        local_file = os.path.join(self.source_file_path, file_name)
        remote_file = fr"\\{self.host}\{self.share}\{self.target_directory}\{file_name}"

        try:
            self.transfer_file_to_nas(local_file, remote_file)
            return True
        except Exception as e:
            raise Exception(f"Error transferring file to NAS: {str(e)}")
